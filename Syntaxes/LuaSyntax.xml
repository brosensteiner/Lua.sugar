<?xml version="1.0" encoding="UTF-8"?>
<!--
@description Defines the Lua syntax
@author 	 Bernhard Rosensteiner <brosensteiner@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2012 Bernhard Rosensteiner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<syntax name="language-root.lua">

    <zones>
    
    	<zone name="lua.comment.shebang">
    	    <expression>^(#!).*?\blua\b.*?$[\n\r]*</expression>
    	    <capture number="1" name="punctuation.definition.begin"/>
    	</zone>
    	
    	<include collection="Variables" />
    	<include collection="Comments" />
    	<include collection="Numeric" />
    	<include collection="Operators" />
    	<include collection="ControlKeywords" />
    	<include collection="LuaLanguage" />
    	<include collection="FunctionDef"/>
    	<include collection="Function"/>
    	<include collection="Strings"/>
        <include collection="Tables" />
        <include collection="GeneralWord" />
        
		<zone name="lua.open-parenthesis">
			<expression>\(</expression>
		</zone>
		<zone name="lua.close-parenthesis">
			<expression>\)</expression>
		</zone>
                
	</zones>
    
    
	<library>
	
		<collection name="Comments">
		
			<zone name="comment.block.lua">
			    <starts-with>
			        <expression>--\[(=*)\[</expression>
			        <capture number="0" name="punctuation.definition.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>(--)?\]\1\]</expression>
			        <capture number="0" name="punctuation.definition.end"/>
			    </ends-with>
			    <subzones>
			    	<include collection="Markup" />
			    </subzones>
			</zone>
			
			<zone name="comment.line.lua">
			    <starts-with>
			        <expression>--</expression>
			        <capture number="0" name="punctuation.definition.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>$[\n\r]*</expression>
			    </ends-with>
			    <subzones>
			    	<include collection="Markup" />
			    </subzones>
			</zone>
		
		</collection>
		
		<collection name="Markup">
		
	    	<zone name="markup.link"><!--stolen from php sugar-->
	    		<expression>(?i)\b(?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;>]+|\(([^\s()&lt;>]+|(\([^\s()&lt;>]+\)))*\))+(?:\(([^\s()&lt;>]+|(\([^\s()&lt;>]+\)))*\)|[^\s`!()\[\]{};:'".,&lt;>?«»“”‘’])</expression>
	    	</zone>
			
		</collection>
		
		<collection name="Variables">
		
			<zone name="lua.variable.assignment">
				<expression>([a-zA-Z0-9_]*)\s*(=(?!=))</expression>
				<capture number="1" name="lua.variable.assignment.name"/>
				<capture number="2" name="lua.operator.assignment"/>
			</zone>
		
			<zone name="lua.global.variable">	<!--as long as Lua uses the _[A-Z] pattern for global variables we don´t have to worry about new ones in future Lua versions, otherwise we must begin to be more specific-->
			    <expression>\b_[A-Z]+\b</expression>
			</zone>
			
			<zone name="lua.metamethod.mode">
				<expression>\b__mode\b</expression>
			</zone>
			
			<zone name="lua.metamethod"><!--should be sufficient for general catching off Lua- and user defined metamethods-->
				<expression>\b__[a-zA-Z0-9_]+\b</expression>
			</zone>
		
			<zone name="lua.variable.self">
			    <expression>(?&lt;![^.]\.|:)\b(self)\b</expression>
			</zone>
			
			<zone name="lua.variable.dummy"><!--not valid syntax, but good behaviour-->
			    <expression>\b_\b</expression>
			</zone>
			
		</collection>
		
		<collection name="ControlKeywords">
		
			<zone name="lua.keyword.control.for">
			    <expression>\bfor\b</expression>
			</zone>
			
			<zone name="lua.keyword.control.in">
			    <expression>\bin\b</expression>
			</zone>
		    
		    <zone name="lua.keyword.control.then">
		        <expression>\bthen\b</expression>
		    </zone>
		    
		    <zone name="lua.keyword.control.end">
		        <expression>\bend\b</expression>
		    </zone>
		    
		    <zone name="lua.keyword.control.until">
		        <expression>\buntil\b</expression>
		    </zone>
		    
		    <zone name="lua.keyword.control.ifs">
		        <expression>\b(repeat|while|if)\b</expression>
		    </zone>
		    
		    <zone name="lua.keyword.control.rest">
		        <expression>\b(return|elseif|else|do)\b</expression>
		    </zone>
		    
		    <zone name="lua.storage.type.local"><!--don´t know where to put it else - not that important-->
		        <expression>\blocal\b</expression>
		    </zone>
		    
		</collection>
		
		<collection name="Tables">
		
			<zone name="lua.table.constructor">
			    <starts-with>
			        <expression>\{</expression>
			        <capture number="0" name="lua.open-brace"/>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			        <capture number="0" name="lua.close-brace"/>
			    </ends-with>
			    <subzones>
			    	<zone name="lua.punctuation.table.separator">
			        	<expression>,|;</expression>
			    	</zone>
			    	<include syntax="language-root.lua" />
			    </subzones>
			</zone>
			
			<zone name="lua.table.index">
			    <starts-with>
			        <expression>\[</expression>
			        <capture number="0" name="lua.open-bracket"/>
			    </starts-with>
			    <ends-with>
			        <expression>\]</expression>
			        <capture number="0" name="lua.close-bracket"/>
			    </ends-with>
			    <subzones>
			    	<include syntax="language-root.lua" />
			    </subzones>
			</zone>
		
		</collection>
		
		
		<collection name="Strings">
		
			<zone name="lua.string.quoted.single">
			    <starts-with>
			        <expression>'</expression>
			        <capture number="0" name="lua.punctuation.singlequote.string.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>'</expression>
			        <capture number="0" name="lua.punctuation.singlequote.string.end"/>
			    </ends-with>
			    <subzones>
			    	<include collection="Backreference_and_MagicEscape"/>
			    	<include collection="EscapeChar"/>
			        <include collection="Additional"/>
			    </subzones>
			</zone>
			
			<zone name="lua.string.quoted.double">
			    <starts-with>
			        <expression>"</expression>
			        <capture number="0" name="lua.punctuation.doublequote.string.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>"</expression>
			        <capture number="0" name="lua.punctuation.doublequote.string.end"/>
			    </ends-with>
			    <subzones>
			    	<include collection="Backreference_and_MagicEscape"/>
			    	<include collection="EscapeChar"/>
			        <include collection="Additional"/>
			    </subzones>
			</zone>
			
			<zone name="lua.string.quoted.multiline">
			    <starts-with>
			        <expression>(?&lt;!--)\[(=*)\[</expression>
			        <capture number="0" name="lua.punctuation.doublequote.string.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>(?&lt;!--)\]\1\]</expression>
			        <capture number="0" name="lua.punctuation.doublequote.string.end"/>
			    </ends-with>
			    <subzones>
			    	<zone name="lua.punctuation.doublequote.string">
			    		<expression>(?&lt;!--)\[=*\[|(?&lt;!--)\]=*\]</expression>
			    	</zone>
			    	<include collection="Backreference_and_MagicEscape"/>
			        <include collection="Additional"/>
			    </subzones>
			</zone>
		
		</collection>
	
		<collection name="FunctionDef">
		
			<zone name="lua.container.function.definition-named">
			    <starts-with>
			        <expression>(\blocal\s+)?(\bfunction\b)\s*([a-zA-Z0-9\.:_]+)\s*(\()</expression>
			        <capture number="1" name="lua.keyword.local"/>
			        <capture number="2" name="lua.keyword.function"/>
			        <capture number="3" name="lua.function.name"/>
			        <capture number="4" name="lua.open-parenthesis"/>
			    </starts-with>
			    <ends-with>
			        <expression>\)</expression>
			        <capture number="0" name="lua.close-parenthesis"/>
			    </ends-with>
			    <subzones>
			    	<include syntax="language-root.lua"/>
			    </subzones>
			</zone>
		
			<zone name="lua.container.function.definition-named">
				<expression>(\blocal\s+)?(\bfunction\b)\s*([a-zA-Z0-9\.:_]+)</expression>
				<capture number="1" name="lua.keyword.local"/>
				<capture number="2" name="lua.keyword.function"/>
				<capture number="3" name="lua.function.name"/>
			</zone>
			<zone name="lua.container.function.definition-anonymous">
				<expression>(\blocal\s+)?(\bfunction\b)</expression>
				<capture number="1" name="lua.keyword.local"/>
				<capture number="2" name="lua.keyword.function"/>
			</zone>
			
		</collection>
	
		<collection name="Function">
		
			<zone name="lua.container.library-function-call.magical"><!--special, because of magical character matching in patterns-->
                <starts-with>
                    <expression>(string)(\.)(find|gsub|match|gmatch)\s*(\()</expression>
                    <capture number="1" name="lua.function-call.library-call"/>
                    <capture number="2" name="lua.punctuation.delimiter.period"/>
                    <capture number="3" name="lua.function-call"/>
                    <capture number="4" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.magical">
                	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.format"><!--special, because of formatting commands, context is for LuaTeX injection in ConTeXt syntax-->
                <starts-with>
                    <expression>(string)(\.)(format)\s*(\()</expression>
                    <capture number="1" name="lua.function-call.library-call"/>
                    <capture number="2" name="lua.punctuation.delimiter.period"/>
                    <capture number="3" name="lua.function-call"/>
                    <capture number="4" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.format">
                	<include collection="Functionargument-format" />
                	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.io-read">
                <starts-with>
                    <expression>(?&lt;=\.|:)(read)\s*(\()</expression>
                    <capture number="1" name="lua.function-call"/>
                    <capture number="2" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.io-read">
                  	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.io-open">
                <starts-with>
                    <expression>(io)(?:(\.)|(:))(open)\s*(\()</expression>
                    <capture number="1" name="lua.function-call.library-call"/>
                    <capture number="2" name="lua.punctuation.delimiter.period"/>
                    <capture number="3" name="lua.punctuation.delimiter.colon"/>
                    <capture number="4" name="lua.function-call"/>
                    <capture number="5" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.io-open">
                  	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.io-popen">
                <starts-with>
                    <expression>(io)(?:(\.)|(:))(popen)\s*(\()</expression>
                    <capture number="1" name="lua.function-call.library-call"/>
                    <capture number="2" name="lua.punctuation.delimiter.period"/>
                    <capture number="3" name="lua.punctuation.delimiter.colon"/>
                    <capture number="4" name="lua.function-call"/>
                    <capture number="5" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.io-popen">
                  	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.file-seek">
                <starts-with>
                    <expression>(?&lt;=:)(seek)\s*(\()</expression>
                    <capture number="1" name="lua.function-call"/>
                    <capture number="2" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.file-seek">
                  	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.setvbuf">
            	<starts-with>
                    <expression>(?&lt;=:)(setvbuf)\s*(\()</expression>
                    <capture number="1" name="lua.function-call"/>
                    <capture number="2" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.file-setvbuf">
                  	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.container.library-function-call.collectgarbage">                <starts-with>
                    <expression>(collectgarbage)\s*(\()</expression>
                    <capture number="1" name="lua.function-call"/>
                    <capture number="2" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument.collectgarbage">
                  	<include syntax="language-root.lua"/>
                </subzones>
            </zone>
                	    	    	    	
            <zone name="lua.container.lua-function-call">
                <starts-with>
                    <expression>(?&lt;=:|\.|)([a-zA-Z0-9_]+)\s*(\()</expression>
                    <capture number="1" name="lua.function-call"/>
                    <capture number="2" name="lua.open-parenthesis"/>
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="lua.close-parenthesis"/>
                </ends-with>
                <subzones name="lua.function-argument">
                    <include syntax="language-root.lua"/>
                </subzones>
            </zone>
            
            <zone name="lua.function-call.library-call">
                <expression>[a-zA-Z0-9_]+(?=\.|:)</expression>
            </zone>
            
            <zone name="lua.function-call">
                <expression>(?&lt;=\.|:)[a-zA-Z0-9_]+</expression>
            </zone>
            
            <zone name="lua.function-call">
                <expression>[a-zA-Z0-9_]+\s*(?=\()</expression>
            </zone>
                	    	    	    	
		</collection>
        
        <collection name="Operators">
               
           	<zone name="lua.operator.comparison.binary">
        	    <expression>(=|~)=|&lt;=?|>=?</expression>
        	</zone>
        	
        	<zone name="lua.operator.assignment">
        	    <expression>=</expression>
        	</zone>
        	
        	<zone name="lua.operator.logical">
        	    <expression>\b(and|or|not)\b</expression>
        	</zone>
        	        	
        	<zone name="lua.operator.arithmetic.binary">
        	    <expression>\+|-(?!-)|\*|\/|\^|%</expression>
        	</zone>
        	
        	<zone name="lua.operator.lenght">
        	    <expression>#</expression>
        	</zone>
        	
        	<zone name="lua.operator.concatenation">
        	    <expression>(?&lt;!\.)\.{2}(?!\.)</expression>
        	</zone>
        	
        	<zone name="lua.punctuation.delimiter.colon">
        	    <expression>(?&lt;=[a-zA-Z0-9_]):(?=[a-zA-Z0-9_])</expression>
        	</zone>
        	
        	<zone name="lua.punctuation.delimiter.period">
        	    <expression>(?&lt;=[a-zA-Z0-9_])\.(?=[a-zA-Z0-9_])</expression>
        	</zone>
        	
        </collection>
        
        <collection name="Loopbreak">
            <zone name="lua.keyword.control.break">	<!--break only makes sense in a if|while|for loop-->
                <expression>\bbreak\b</expression>
            </zone>
        </collection>
        
        <collection name="LuaLanguage">
        
        	<zone name="lua.constant.language.require">
        	    <expression>\b(require)\b</expression>
        	</zone>
        
        	<zone name="lua.constant.language.math-constants">
        	    <expression>\b(math)(\.)(pi|huge)\b</expression>
        	    <capture number="1" name="lua.function-call.library-call"/>
        	    <capture number="2" name="lua.punctuation.delimiter.period"/>
        	</zone>
        
            <zone name="lua.constant.language.vararg">
                <expression>(?&lt;![.])(\.{3})(?!\.)</expression>
            </zone>
            
            <zone name="lua.constant.language.boolean-values">
                <expression>\b(false|nil|true)\b</expression>
                <capture number="1" name="lua.constant.language.boolean-values"/>
            </zone>
            
            <zone name="lua.constant.language.predefined-streams">
            	<expression>\b(io)(\.)(std(in|out|err)\b)</expression>
            	<capture number="1" name="lua.function-call.library-call"/>
            	<capture number="2" name="lua.punctuation.delimiter.period"/>
            </zone>
            
            <zone name="lua.punctuation.delimiter.comma"> <!--for better color highlighting we capture all commas, so we can make nice definitions in Lua.css-->
                <expression>,</expression>
            </zone>
            
        </collection>
        
        <collection name="Numeric">
 
        	<zone name="lua.numeric.hexadecimal">
        	    <expression>\b0(x|X)[a-fA-F\d]+(\.[a-fA-F\d]+)?((p|P)(-|\+)\d+)?\b</expression>
        	</zone>
        	<zone name="lua.numeric">
        	    <expression>\b(\d+(\.\d+)?([eE]-?\d+)?|\.\d+([eE]-?\d+)?)\b</expression>
        	</zone>
        	
        </collection>
        
        <collection name="GeneralWord">
        	<zone name="lua.language.word"> <!--for better color highlighting we capture all words, so we can make nice definitions in Lua.css-->
        	    <expression>\b[a-zA-Z0-9_]+\b</expression>
        	</zone>
        </collection>
        
        <collection name="EscapeChar">
        	<zone name="lua.escape.character.byte">
        	    <expression>\\x\d{2}|\\\d{1,3}</expression>
        	</zone>
        	<zone name="lua.escape.character">
        	    <expression>\\[abfnrtv\W'"\!$%&amp;]</expression>
        	</zone>
        </collection>
        
        <collection name="Backreference_and_MagicEscape">
        	<zone name="lua.escape.magic-character">
        		<expression>%(\(|\)|\.|%|\+|-|\*|\?|\[|\]|\^|\$)</expression>
        	</zone>
        	<zone name="lua.keyword.other.magic-character.backreference">
        		<expression>%\d+</expression>
        	</zone>
        </collection>
        
        <collection name="Additional"><!--some keywords which are only valid in designated functions, so they syntax highlighting will be made in Lua.css, and in stings: see string zones-->
        
        	<zone name="lua.keyword.other.PEG">
        	    <expression>#|&amp;|!|/|&lt;-|->|=>|\{:[a-zA-Z0-9_]+:|\{(:|\~)?|(:|\~)?\}|\=[a-zA-Z0-9_]+</expression>
        	</zone> 
        	        
        	<zone name="lua.keyword.other.io-read">
        		<expression>(?&lt;="|')(\*all|\*line|\*number|\*a|\*l|\*n)(?="|')</expression>
        	</zone>
        	<zone name="lua.keyword.other.io-popen">
        		<expression>(?&lt;="|')(r|w)(?="|')</expression>
        	</zone>
        	
        	<zone name="lua.keyword.other.io-open">
        		<expression>(?&lt;="|')(r|w|a)(\+|b)?(?="|')</expression>
        	</zone>
        	<zone name="lua.keyword.other.file-setbuf">
        		<expression>(?&lt;="|')(no|full|line)(?="|')</expression>
        	</zone>
        	<zone name="lua.keyword.other.file-seek">
        		<expression>(?&lt;="|')(set|cur|end)(?="|')</expression>
        	</zone>
        	<zone name="lua.keyword.other.collectgarbage">
        		<expression>(?&lt;="|')(stop|restart|collect|count|step|setpause|setstepmul)(?="|')</expression>
        	</zone>
        	<zone name="lua.keyword.other.metamethod.mode">
        		<expression>(?&lt;="|')(k|v|kv|vk)(?="|')</expression>
        	</zone>
			<zone name="lua.keyword.character-class">
				<expression>%([acdlpsuwxzbACDLPSUWXZ]|nl)</expression>
			</zone>                    		    
			<zone name="lua.keyword.other.magic-character">
				<expression>\(|\)|\.|%|\+|-|\*|\?|\[|\]|\^|\$</expression>
			</zone>

        </collection>
        
        <collection name="Functionargument-format">
        
           	<zone name="lua.string.quoted.double.format">
           		<starts-with>
           		    <expression>(?&lt;=\()\s*(?:(")|('))</expression>
           		    <capture number="1" name="lua.punctuation.doublequote.string.begin.format"/>
           		    <capture number="2" name="lua.punctuation.singlequote.string.begin.format"/>
           		</starts-with>
           		<ends-with>
           		    <expression>(?:(")|('))</expression>
           		    <capture number="1" name="lua.punctuation.doublequote.string.end.format"/>
           		    <capture number="2" name="lua.punctuation.singlequote.string.end.format"/>
				</ends-with>
           		<subzones>
          			<zone name="lua.keyword.character-class.string-format">
           				<expression>%(-|\+|#|0|[[:space:]])?(\d+)?(\.\d+)?([cdEefgGiouxXqs])</expression>
           				<capture number="1" name="lua.keyword.other.string-format-flags"/>
           				<capture number="2" name="lua.keyword.other.string-format-width"/>
           				<capture number="3" name="lua.keyword.other.string-format-precision"/>
           				<capture number="4" name="lua.keyword.other.string-format-type"/>
          			</zone>
          			<include collection="Additional"/>
           		</subzones> 
           	</zone>
           	
        </collection>            
                    
	</library>
    
</syntax>